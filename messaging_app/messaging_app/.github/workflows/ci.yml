name: Django CI

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'messaging_app/**'
      - '.github/workflows/ci.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'messaging_app/**'
      - '.github/workflows/ci.yml'

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: [3.10.12, 3.11, 3.12]
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root_password_123
          MYSQL_DATABASE: messaging_app_test_db
          MYSQL_USER: messaging_user
          MYSQL_PASSWORD: messaging_password_123
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping -h localhost"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    env:
      DJANGO_SETTINGS_MODULE: messaging_app.settings
      MYSQL_DATABASE: messaging_app_test_db
      MYSQL_USER: messaging_user
      MYSQL_PASSWORD: messaging_password_123
      MYSQL_ROOT_PASSWORD: root_password_123
      DB_HOST: 127.0.0.1
      DB_PORT: 3306
      SECRET_KEY: test-secret-key-for-github-actions
      DEBUG: False

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('messaging_app/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          default-mysql-client \
          default-libmysqlclient-dev \
          gcc \
          pkg-config

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r messaging_app/requirements.txt
        pip install -r messaging_app/requirements-dev.txt

    - name: Wait for MySQL to be ready
      run: |
        while ! mysqladmin ping -h127.0.0.1 -P3306 -umessaging_user -pmessaging_password_123 --silent; do
          echo "Waiting for MySQL..."
          sleep 2
        done
        echo "MySQL is ready!"

    - name: Verify MySQL connection
      run: |
        mysql -h127.0.0.1 -P3306 -umessaging_user -pmessaging_password_123 -e "SELECT 1"
        mysql -h127.0.0.1 -P3306 -umessaging_user -pmessaging_password_123 -e "SHOW DATABASES"

    - name: Run Django migrations
      run: |
        cd messaging_app
        python manage.py migrate --settings=messaging_app.settings

    - name: Run code linting with flake8
      run: |
        cd messaging_app
        flake8 --max-line-length=88 --exclude=venv,migrations,__pycache__,.git --statistics .
        # Fail the build if linting errors are detected
        if [ $? -ne 0 ]; then
          echo "‚ùå Linting errors detected! Build failed."
          exit 1
        fi

    - name: Run tests with pytest
      run: |
        cd messaging_app
        python -m pytest test_*.py -v \
          --junitxml=test_results.xml \
          --cov=. \
          --cov-report=xml:coverage.xml \
          --cov-report=html:htmlcov \
          --cov-report=term \
          --tb=short

    - name: Run Django built-in tests
      run: |
        cd messaging_app
        python manage.py test --verbosity=2 --keepdb

    - name: Generate code coverage report summary
      run: |
        cd messaging_app
        if [ -f coverage.xml ]; then
          echo "üìä Code Coverage Report Generated Successfully"
          python -c "
import xml.etree.ElementTree as ET
tree = ET.parse('coverage.xml')
root = tree.getroot()
coverage = root.attrib.get('line-rate', '0')
coverage_percent = float(coverage) * 100
print(f'Coverage: {coverage_percent:.2f}%')
"
        fi

    - name: Upload test results and coverage
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-python-${{ matrix.python-version }}
        path: |
          messaging_app/test_results.xml
          messaging_app/coverage.xml
          messaging_app/htmlcov/
        retention-days: 30

    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v3
      if: matrix.python-version == '3.10.12'
      with:
        file: messaging_app/coverage.xml
        directory: messaging_app/
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  lint:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.10.12

    - name: Install linting dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort

    - name: Run Black code formatter check
      run: |
        cd messaging_app
        black --check --diff .

    - name: Run isort import sorting check
      run: |
        cd messaging_app
        isort --check-only --diff .

    - name: Run flake8 linting
      run: |
        cd messaging_app
        # Fail the build if any linting errors are detected
        flake8 --max-line-length=88 --exclude=venv,migrations,__pycache__,.git --statistics .
        echo "‚úÖ No linting errors detected!"

  security:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.10.12

    - name: Install security scanning tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety

    - name: Run Bandit security linter
      run: |
        cd messaging_app
        bandit -r . -x tests/ -f json -o bandit-report.json || true

    - name: Run Safety dependency security check
      run: |
        cd messaging_app
        safety check --json --output safety-report.json || true

    - name: Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          messaging_app/bandit-report.json
          messaging_app/safety-report.json
