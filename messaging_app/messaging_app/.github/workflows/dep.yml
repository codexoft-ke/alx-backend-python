name: Docker Build and Deploy

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'messaging_app/**'
      - '.github/workflows/dep.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'messaging_app/**'
      - '.github/workflows/dep.yml'
  release:
    types: [published]

env:
  DOCKER_HUB_REPO: ${{ secrets.DOCKER_HUB_USERNAME }}/messaging-app
  REGISTRY: docker.io

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.DOCKER_HUB_REPO }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./messaging_app
        file: ./messaging_app/Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          VERSION=${{ github.sha }}

    - name: Generate deployment summary
      run: |
        echo "## 🐳 Docker Build Summary" >> $GITHUB_STEP_SUMMARY
        echo "| Property | Value |" >> $GITHUB_STEP_SUMMARY
        echo "|----------|-------|" >> $GITHUB_STEP_SUMMARY
        echo "| Repository | \`${{ env.DOCKER_HUB_REPO }}\` |" >> $GITHUB_STEP_SUMMARY
        echo "| Tags | \`${{ steps.meta.outputs.tags }}\` |" >> $GITHUB_STEP_SUMMARY
        echo "| Registry | \`${{ env.REGISTRY }}\` |" >> $GITHUB_STEP_SUMMARY
        echo "| Build Time | \`$(date -u)\` |" >> $GITHUB_STEP_SUMMARY
        echo "| Git SHA | \`${{ github.sha }}\` |" >> $GITHUB_STEP_SUMMARY
        echo "| Branch | \`${{ github.ref_name }}\` |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🚀 Pull Command" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
        echo "docker pull ${{ env.DOCKER_HUB_REPO }}:latest" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

  security-scan:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.event_name != 'pull_request'
    
    steps:
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.DOCKER_HUB_REPO }}:${{ github.ref_name }}-${{ github.sha }}
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Upload security scan results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: trivy-scan-results
        path: trivy-results.sarif
        retention-days: 30

  deploy-staging:
    runs-on: ubuntu-latest
    needs: [build-and-push, security-scan]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment: staging
    
    steps:
    - name: Deploy to staging
      run: |
        echo "🚀 Deploying to staging environment..."
        echo "Image: ${{ env.DOCKER_HUB_REPO }}:develop-${{ github.sha }}"
        # Add your staging deployment commands here
        # Example: kubectl, docker-compose, or other deployment tools

  deploy-production:
    runs-on: ubuntu-latest
    needs: [build-and-push, security-scan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    
    steps:
    - name: Deploy to production
      run: |
        echo "🚀 Deploying to production environment..."
        echo "Image: ${{ env.DOCKER_HUB_REPO }}:latest"
        # Add your production deployment commands here
        # Example: kubectl, docker-compose, or other deployment tools

  cleanup:
    runs-on: ubuntu-latest
    needs: [build-and-push]
    if: always()
    
    steps:
    - name: Clean up old images
      run: |
        echo "🧹 Cleanup process initiated..."
        echo "This step can include cleanup of old Docker images or artifacts"
        # Add cleanup commands if needed
