pipeline {
    agent any
    
    environment {
        DJANGO_SETTINGS_MODULE = 'messaging_app.settings'
        PYTHONPATH = '.'
        DATABASE_URL = 'sqlite:///test.db'
        DOCKER_HUB_REPO = 'your-dockerhub-username/messaging-app'
        DOCKER_IMAGE_TAG = "${BUILD_NUMBER}"
        DOCKER_LATEST_TAG = 'latest'
    }
    
    stages {
        stage('Checkout') {
            steps {
                echo 'Checking out source code from GitHub...'
                // Use GitHub credentials to clone the repository
                git credentialsId: 'github-credentials', 
                    url: 'https://github.com/codexoft-ke/alx-backend-python.git',
                    branch: 'main'
                
                // Show current git branch
                sh 'git branch'
            }
        }
        
        stage('Setup Environment') {
            steps {
                echo 'Setting up Python environment and installing dependencies...'
                script {
                    // Install Python dependencies
                    sh '''
                        python3 -m venv venv
                        . venv/bin/activate
                        pip3 install --upgrade pip
                        pip3 install -r messaging_app/requirements.txt
                        pip3 install -r messaging_app/requirements-dev.txt
                        echo "Dependencies installed successfully"
                    '''
                }
            }
        }
        
        stage('Lint Code') {
            steps {
                echo 'Running code linting with flake8...'
                script {
                    sh '''
                        . venv/bin/activate
                        cd messaging_app
                        flake8 --max-line-length=88 --exclude=venv,migrations,__pycache__,.git --exit-zero . > flake8_report.txt
                        echo "Linting completed"
                    '''
                }
            }
        }
        
        stage('Database Setup') {
            steps {
                echo 'Setting up test database...'
                script {
                    sh '''
                        . venv/bin/activate
                        cd messaging_app
                        python manage.py migrate --settings=messaging_app.settings
                        echo "Database migration completed"
                    '''
                }
            }
        }
        
        stage('Run Tests') {
            steps {
                echo 'Running tests with pytest...'
                script {
                    sh '''
                        . venv/bin/activate
                        cd messaging_app
                        
                        # Run Django tests with pytest
                        python -m pytest test_*.py -v \
                            --junitxml=test_results.xml \
                            --cov=. \
                            --cov-report=xml:coverage.xml \
                            --cov-report=html:htmlcov \
                            --cov-report=term \
                            --tb=short || true
                        
                        # Also run Django's built-in test runner as fallback
                        python manage.py test --verbosity=2 --keepdb || true
                        
                        echo "Tests completed"
                    '''
                }
            }
        }
        
        stage('Generate Reports') {
            steps {
                echo 'Generating test and coverage reports...'
                script {
                    sh '''
                        . venv/bin/activate
                        cd messaging_app
                        
                        # Generate coverage report if not already generated
                        if [ -f ".coverage" ]; then
                            coverage report --show-missing > coverage_report.txt
                            coverage html
                        fi
                        
                        echo "Reports generated"
                    '''
                }
            }
        }
        
        stage('Build Docker Image') {
            steps {
                echo 'Building Docker image...'
                script {
                    // Build Docker image with build number as tag
                    sh """
                        cd messaging_app
                        docker build -t ${DOCKER_HUB_REPO}:${DOCKER_IMAGE_TAG} .
                        docker build -t ${DOCKER_HUB_REPO}:${DOCKER_LATEST_TAG} .
                        echo "Docker image built successfully"
                    """
                }
            }
        }
        
        stage('Push Docker Image') {
            steps {
                echo 'Pushing Docker image to Docker Hub...'
                script {
                    // Login to Docker Hub and push image
                    withCredentials([usernamePassword(
                        credentialsId: 'docker-hub-credentials',
                        usernameVariable: 'DOCKER_USERNAME',
                        passwordVariable: 'DOCKER_PASSWORD'
                    )]) {
                        sh """
                            echo \$DOCKER_PASSWORD | docker login -u \$DOCKER_USERNAME --password-stdin
                            docker push ${DOCKER_HUB_REPO}:${DOCKER_IMAGE_TAG}
                            docker push ${DOCKER_HUB_REPO}:${DOCKER_LATEST_TAG}
                            echo "Docker image pushed successfully"
                        """
                    }
                }
            }
        }
    }
    
    post {
        always {
            echo 'Pipeline completed - cleaning up...'
            
            // Clean up Docker images to save space
            script {
                sh """
                    docker rmi ${DOCKER_HUB_REPO}:${DOCKER_IMAGE_TAG} || true
                    docker rmi ${DOCKER_HUB_REPO}:${DOCKER_LATEST_TAG} || true
                    docker system prune -f || true
                """
            }
            
            // Archive test results and reports
            script {
                dir('messaging_app') {
                    // Archive test results if they exist
                    if (fileExists('test_results.xml')) {
                        archiveArtifacts artifacts: 'test_results.xml', fingerprint: true
                        publishTestResults([
                            testResultsPattern: 'test_results.xml',
                            allowEmptyResults: true
                        ])
                    }
                    
                    // Archive coverage reports if they exist
                    if (fileExists('coverage.xml')) {
                        archiveArtifacts artifacts: 'coverage.xml', fingerprint: true
                    }
                    
                    if (fileExists('coverage_report.txt')) {
                        archiveArtifacts artifacts: 'coverage_report.txt', fingerprint: true
                    }
                    
                    if (fileExists('flake8_report.txt')) {
                        archiveArtifacts artifacts: 'flake8_report.txt', fingerprint: true
                    }
                    
                    // Archive HTML coverage report
                    if (fileExists('htmlcov/index.html')) {
                        publishHTML([
                            allowMissing: false,
                            alwaysLinkToLastBuild: true,
                            keepAll: true,
                            reportDir: 'htmlcov',
                            reportFiles: 'index.html',
                            reportName: 'Coverage Report'
                        ])
                    }
                }
            }
        }
        
        success {
            echo '‚úÖ Pipeline completed successfully!'
            echo 'All tests passed and reports generated.'
            echo "üê≥ Docker image pushed: ${DOCKER_HUB_REPO}:${DOCKER_IMAGE_TAG}"
            echo "üê≥ Docker image also available as: ${DOCKER_HUB_REPO}:${DOCKER_LATEST_TAG}"
        }
        
        failure {
            echo '‚ùå Pipeline failed!'
            echo 'Check the logs for errors and failed tests.'
        }
        
        unstable {
            echo '‚ö†Ô∏è Pipeline completed with warnings!'
            echo 'Some tests may have failed or code quality issues detected.'
        }
    }
}
